xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
#sanki hatalar arttıkça cafein alımı artıyor xd
data2 <- data[c("hours_coding", "coffee_intake_mg", "distractions", "sleep_hours", "commits", "bugs_reported", "ai_usage_hours", "cognitive_load")]
#Scale the data before clustering
scaled_data <- scale(data2)
fviz_nbclust(scaled_data, kmeans, method = "wss") + labs(title = "Elbow Method for Optimal k")
kmeans_result <- kmeans(scaled_data, centers = 3)
data2$cluster <- as.factor(kmeans_result$cluster)
View(data2)
View(scaled_data)
data.frame(scaled_data)
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
View(data)
View(scaled_data)
View(data2)
View(scaled_data)
scaled_data
scaled_data
data <- ai_dev_productivity
dim(data)
str(data)
summary(data)
head(data)
any(is.na(data)) #boş verimiz yoktur
rowSums(is.na(data))
data2 <- data[c("hours_coding", "coffee_intake_mg", "distractions", "sleep_hours", "commits", "bugs_reported", "ai_usage_hours", "cognitive_load")]
#Scale the data before clustering
scaled_data <- scale(data2)
View(scaled_data)
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
scaled_data <- as.data.frame(scale(data2))
View(scaled_data)
scaled_data <- as.data.frame(scale(data2))
scaled_data$task_success <- data$task_success
#Drawing regression line logistic for coffe_intake
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(data, aes(x = coffee_intake_mg, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_coding <- glm(task_success ~ hours_coding, data = scaled_data, family = "binomial")
summary(log_model_based_coding)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_both <- glm(task_success ~ hours_coding + coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_both)
View(data2)
View(data)
View(scaled_data)
# Olasılık tahmini
scaled_data$predicted_prob <- predict(log_model2, type = "response")
exp(coef(log_model_based_both))
exp(confint(log_model_based_both))
# Olasılık tahmini
scaled_data$predicted_prob <- predict(log_model_based_both, type = "response")
scaled_datadata$predicted_class <- ifelse(scaled_datadata$predicted_prob > 0.5, 1, 0)
# Olasılık tahmini
scaled_data$predicted_prob <- predict(log_model_based_both, type = "response")
scaled_datadata$predicted_class <- ifelse(scaled_datadata$predicted_prob > 0.5, 1, 0)
# Olasılık tahmini
scaled_data$predicted_prob <- predict(log_model_based_both, type = "response")
scaled_data$predicted_class <- ifelse(scaled_data$predicted_prob > 0.5, 1, 0)
table(Predicted = scaled_data$predicted_class, Actual = scaled_data$task_success)
exp(confint(log_model_based_both))
exp(coef(log_model_based_both))
exp(coef(log_model_based_both))
exp(confint(log_model_based_both))
conf_matrix <- table(Predicted = scaled_data$predicted_class, Actual = scaled_data$task_success)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Doğruluk Oranı: ", round(accuracy * 100, 2), "%"))
scaled_data$predicted_prob <- predict(log_model_based_both, type = "response")
scaled_data$predicted_class <- ifelse(scaled_data$predicted_prob > 0.5, 1, 0)
conf_matrix <- table(Predicted = scaled_data$predicted_class, Actual = scaled_data$task_success)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Doğruluk Oranı: ", round(accuracy * 100, 2), "%"))
log_model_based_both
abline(log_model_based_both,lwd=2)
abline(log_model_based_both,lwd=2)
abline(log_model_based_both,lwd=3)
abline(log_model_based_both)
plot(scaled_data$hours_coding, scaled_data$task_success)
abline(log_model_based_both)
log_model_based_both
plot(scaled_data$coffee_intake_mg, scaled_data$task_success)
abline(log_model_based_both)
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success))
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success))
log_model_based_coding <- glm(task_success ~ hours_coding, data = scaled_data, family = "binomial")
summary(log_model_based_coding)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.2) +
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.2)
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.2)
geom_smooth(method = "glm", method.args = list(family = "binomial")) +  # 4. Lojistik regresyon eğrisi çiz
labs(
title = "Logistic Regression Model",
)
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.2)
geom_smooth(method = "glm", method.args = list(family = "binomial")) +  # 4. Lojistik regresyon eğrisi çiz
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.2)
geom_smooth(method = "glm", method.args = list(family = "binomial"))
#Drawing logistic regression line for coffe_intake
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
#Drawing logistic regression line for coffe_intake
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = FALSE) +
theme_minimal()
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_coding <- glm(task_success ~ hours_coding, data = scaled_data, family = "binomial")
summary(log_model_based_coding)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
roc_obj <- roc(scaled_data$task_success, scaled_data$predicted_prob)
roc_obj <- roc(scaled_data$task_success, scaled_data$predicted_prob)
library(pROC)
roc_obj <- roc(scaled_data$task_success, scaled_data$predicted_prob)
auc_val <- auc(roc_obj); auc_val
knitr::opts_chunk$set(echo = TRUE)
```{r pressure, echo=FALSE}
```{r setup, include=FALSE}
summary(cars)
plot(pressure)
data <- ai_dev_productivity
dim(data)
str(data)
summary(data)
head(data)
any(is.na(data)) #boş verimiz yoktur
rowSums(is.na(data))
data <- ai_dev_productivity
dim(data)
str(data)
summary(data)
summary(data)
par(mfrow=c(3, 3))
for (col_name in names(data)) {
hist(data[[col_name]],
main = paste("Histogram of", col_name),
xlab = col_name,
col = "skyblue",
border = "white")
}
head(data)
summary(data)
head(data)
any(is.na(data)) #boş verimiz yoktur
rowSums(is.na(data))
#Genel olarak bu veri nasıl dağıldı ona bakıyoruz
par(mfrow=c(3, 3))
for (col_name in names(data)) {
hist(data[[col_name]],
main = paste("Histogram of", col_name),
xlab = col_name,
col = "skyblue",
border = "white")
}
library(cluster)
library(cluster)
for (col_name in names(data)) {
hist(data[[col_name]],
main = paste("Histogram of", col_name),
xlab = col_name, col = "skyblue", border = "white")
}
plot(data$coffee_intake_mg, data$bugs_reported,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
#sanki hatalar arttıkça cafein alımı artıyor xd
scaled_data <- scale(data2)
plot(scaled_data$coffee_intake_mg, scaled_data$bugs_reported,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
scaled_data <- as.data.frame(scale(data2))
scaled_data$task_success <- data$task_success
plot(scaled_data$coffee_intake_mg, scaled_data$bugs_reported,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
#sanki hatalar arttıkça cafein alımı artıyor xd
plot(data$coffee_intake_mg, data$bugs_reported,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
#sanki hatalar arttıkça cafein alımı artıyor xd
plot(data$coffee_intake_mg, data$commits,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
#sanki hatalar arttıkça cafein alımı artıyor xd
plot(data$coffee_intake_mg, data$commits,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
#sanki hatalar arttıkça cafein alımı artıyor xd
plot(data$cognitive_load, data$ai_usage_hours)
plot(data$coffee_intake_mg, data$sleep_hours,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
install.packages("corrplot")
library(corrplot)
cor_matrix <- cor(data)
corrplot(cor_matrix, method = "color", type = "upper",
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
install.packages("corrplot")
plot(data$coffee_intake_mg, data$hours_coding ,
main='Cafein Intake vs Bugs Reported',
xlab='Caffein Intage(mg)',
ylab='Number of Reported Bugs')
plot(data$coffee_intake_mg, data$hours_coding ,
main='Cafein Intake vs Coding Hours',
xlab='Caffein Intake(mg)',
ylab='Coding Hours')
cor_matrix <- cor(data)
corrplot(cor_matrix, method = "color", type = "upper",
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
#Correlation
install.packages("corrplot")
library(corrplot)
cor_matrix <- cor(data)
corrplot(cor_matrix, method = "color", type = "upper",
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
install.packages("corrplot")
library(corrplot)
cor_matrix <- cor(data)
corrplot(cor_matrix, method = "color", type = "upper",
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
cor(data$coffee_intake_mg, data$hours_coding)
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = 0.6, size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success",
x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_minimal()
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
labs(title = "Coding Hours & Coffee Intake vs Task Success",
x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_minimal()
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = , size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success",
x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = , size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success",
x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = , size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success",
x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_minimal()
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = 0.6, size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success",
x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_minimal()
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = 0.6, size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success", x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_minimal()
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = 0.6, size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success", x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_light()
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = 0.6, size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success", x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_light()
ggplot(data, aes(x = hours_coding, y = coffee_intake_mg, color = factor(task_success))) +
geom_point(alpha = 1, size = 2) +
labs(title = "Coding Hours & Coffee Intake vs Task Success", x = "Hours Coding", y = "Coffee Intake (mg)", color = "Task Success") +
theme_light()
library(corrplot)
cor_matrix <- cor(data)
corrplot(cor_matrix, method = "color", type = "upper",
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
data2 <- data[c("hours_coding", "coffee_intake_mg", "distractions", "sleep_hours", "commits", "bugs_reported", "ai_usage_hours", "cognitive_load")]
#Scale the data before clustering
#PCA to visualize the clusters
fviz_cluster(kmeans_result, data = scaled_data,
geom = "point",
ellipse.type = "norm",)
fviz_nbclust(scaled_data, kmeans, method = "wss") + labs(title = "Elbow Method for Optimal k")
#PCA to visualize the clusters
fviz_cluster(kmeans_result, data = scaled_data,
geom = "point",
ellipse.type = "norm",)
#Add the cluster info
data2$cluster <- as.factor(kmeans_result$cluster)
#Avg values for the clusters
aggregate(. ~ cluster, data = data2, FUN = mean)
#Finding outliers
outliers_list <- lapply(data, function(x) boxplot.stats(x)$out); outliers_list
sapply(outliers_list, length)
#visualization of outliers by
par(mfrow = c(3, 3))  # 3x3 grid
for (col in names(data2)) {
boxplot(data2[[col]], main = paste("Boxplot of", col))
}
outliers_list <- lapply(data, function(x) boxplot.stats(x)$out); outliers_list
sapply(outliers_list, length)
outliers_list <- lapply(data, function(x) boxplot.stats(x)$out);
outliers_list <- lapply(data, function(x) boxplot.stats(x)$out);
outliers_list
outliers_list <- lapply(data, function(x) boxplot.stats(x)$out);
outliers_list
sapply(outliers_list, length)
#Drawing logistic regression line for coffe_intake
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_coffe <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_coffe)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_both <- glm(task_success ~ hours_coding + coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_both)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model_based_both <- glm(task_success ~ hours_coding + coffee_intake_mg, data = scaled_data, family = "binomial")
summary(log_model_based_both)
ggplot(scaled_data, aes(x = hours_coding, y = task_success)) +
geom_jitter(height = 0.05, width = 0, alpha = 0.5, color = "steelblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, se = TRUE, color = "darkred", size = 1.2) +
theme_minimal()
log_model <- glm(task_success ~ coffee_intake_mg, data = scaled_data, family = "binomial")
# Tahmin olasılıklarını veri çerçevesine ekle
scaled_data$predicted_prob <- predict(log_model, type = "response")
# Logistic eğri çizimi
ggplot(scaled_data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.4, color = "steelblue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "darkred") +
labs(
title = "Logistic Regression Curve: Coffee Intake vs Task Success",
x = "Coffee Intake (scaled)",
y = "Probability of Task Success"
) +
theme_minimal()
log_model <- glm(task_success ~ coffee_intake_mg, data = data2, family = "binomial")
log_model <- glm(task_success ~ coffee_intake_mg, data = data, family = "binomial")
# Tahmin olasılıklarını veri çerçevesine ekle
data$predicted_prob <- predict(log_model, type = "response")
# Logistic eğri çizimi
ggplot(data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.4, color = "steelblue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "darkred") +
labs(
title = "Logistic Regression Curve: Coffee Intake vs Task Success",
x = "Coffee Intake (scaled)",
y = "Probability of Task Success"
) +
theme_minimal()
log_model <- glm(task_success ~ coffee_intake_mg, data = data, family = "binomial")
summary(log_model)
log_model <- glm(task_success ~ coffee_intake_mg, data = data, family = "binomial")
summary(log_model)
#append the probs
data$predicted_prob <- predict(log_model, type = "response")
#draw line
ggplot(data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.4, color = "steelblue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "darkred") +
labs(
title = "Logistic Regression Curve: Coffee Intake vs Task Success",
x = "Coffee Intake (scaled)",
y = "Probability of Task Success"
)
theme_minimal()
exp(coef(log_model_based_both))
exp(confint(log_model_based_both))
#Odds ratio and
exp(coef(log_model))
exp(confint(log_model))
#Odds ratio and confint
exp(coef(log_model))
exp(confint(log_model))
#labeling the data based on predictions that comes from logistic reg
scaled_data$predicted_prob <- predict(log_model_based_both, type = "response")
scaled_data$predicted_class <- ifelse(scaled_data$predicted_prob > 0.5, 1, 0)
data$predicted_prob <- predict(log_model_based_both, type = "response")
data$predicted_class <- ifelse(scaled_data$predicted_prob > 0.5, 1, 0)
conf_matrix <- table(Predicted = scaled_data$predicted_class, Actual = scaled_data$task_success)
#labeling the data based on predictions that comes from logistic reg
data$predicted_prob <- predict(log_model, type = "response")
data$predicted_class <- ifelse(scaled_data$predicted_prob > 0.5, 1, 0)
#confusion matrix
conf_matrix <- table(Predicted = scaled_data$predicted_class, Actual = scaled_data$task_success)
conf_matrix
#labeling the data based on predictions that comes from logistic reg
data$predicted_prob <- predict(log_model, type = "response")
data$predicted_class <- ifelse(scaled_data$predicted_prob > 0.5, 1, 0)
#confusion matrix
conf_matrix <- table(Predicted = data$predicted_class, Actual = scaled_data$task_success)
conf_matrix
#accuracy of the model
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Doğruluk Oranı: ", round(accuracy * 100, 2), "%"))
#accuracy of the model
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy Ratio: ", round(accuracy * 100, 2), "%"))
#Odds ratio and confint
exp(coef(log_model))
exp(confint(log_model))
#labeling the data based on predictions that comes from logistic reg
data$predicted_prob <- predict(log_model, type = "response")
data$predicted_class <- ifelse(scaled_data$predicted_prob > 0.5, 1, 0)
#confusion matrix
conf_matrix <- table(Predicted = data$predicted_class, Actual = scaled_data$task_success)
conf_matrix
#accuracy of the model
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy Ratio: ", round(accuracy * 100, 2), "%"))
library(pROC)
#AUC ROC
roc_obj <- roc(scaled_data$task_success, scaled_data$predicted_prob)
auc_val <- auc(roc_obj); auc_val
#log model
log_model <- glm(task_success ~ coffee_intake_mg, data = data, family = "binomial")
summary(log_model)
#append the probs
data$predicted_prob <- predict(log_model, type = "response")
#draw line
ggplot(data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.4, color = "steelblue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "darkred") +
labs(
title = "Logistic Regression Curve: Coffee Intake vs Task Success",
x = "Coffee Intake (scaled)",
y = "Probability of Task Success"
)
theme_minimal()
#log model
log_model <- glm(task_success ~ coffee_intake_mg, data = data, family = "binomial")
summary(log_model)
#draw line
ggplot(data, aes(x = coffee_intake_mg, y = task_success)) +
geom_point(alpha = 0.4, color = "steelblue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "darkred") +
labs(
title = "Logistic Regression Curve: Coffee Intake vs Task Success",
x = "Coffee Intake (scaled)",
y = "Probability of Task Success"
)
theme_minimal()
